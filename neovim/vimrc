" todo list for things I want to add 
" * something to make it easier to see the current file name
" * make something to comment the current line or selected line 
" * make splitting keybinds so that ctrl + enter splits horizontally and ctrl + shift + enter splits vertically
" * then shift enter just opens a new tab
" * get the vimrc to be editable using mkOutOfStoreSymlink
" split on <leader>s and <leader>S
" get a better status bar and color scheme
  " look into Lualine
  " look into lightline?
  
" make the fuzzy finder for live_grep be more like the one for find_files

" --------------------------------------------------
" * neovim configuration file notes:
" useful keybinds that are default
" in Telescope find_files use CTRL + T to open in a new tab
" useful notes
" ctrl + w + w to switch between splits
" ctrl + w + q to close a split
" ctrl + w + v to split vertically
" ctrl + w + s to split horizontally
" ctrl + w + H to move the split to the left
" ctrl + w + J to move the split to the bottom
" ctrl + w + K to move the split to the top
" ctrl + w + L to move the split to the right
" ctrl + w + = to make all splits equal size
" ctrl + w + - to decrease the size of the split
" ctrl + w + + to increase the size of the split

" set splits to open below and to the right
set splitbelow
set splitright

" set the leader key
let mapleader = "\<Space>"

" set the colorscheme
colorscheme onedark

" disable the annoying message at the beginning
" renabled 240312 because I've had some files that got overwritten
" disabling again this shit is so annyoing wtf 
set noswapfile 

" set mouse and clipboard
" turning mouse off so that I can click in and it won't move my cursor
set mouse=
" set clipboard=unnamedplus
set number relativenumber
set scrolloff=5

" set wrap
set nowrap
nnoremap <Leader>z :set wrap!<CR> 

" clear the highlighting from search
nnoremap <Leader><Enter> :nohlsearch<CR> " telescope


" toggle side numbers 
nnoremap <Leader>l :call ToggleSidenums()<CR>
function! ToggleSidenums()
  if &number
    set nonumber norelativenumber
  else
    set number relativenumber
  endif
endfunction

" toggle listchars
nnoremap <Leader>L :call ToggleListchars()<CR>
function! ToggleListchars()
  if &list
    set listchars= nolist
  else
    set list listchars=tab:>␣,trail:~,extends:>,precedes:<,space:·
  endif
endfunction

" rebind J and K to be { and } for jumping whitespace
vnoremap J }
vnoremap K {
nnoremap J }
nnoremap K {

" copy , pasting is handling by going to insert and hitting "ctrl + shift + v" 
vnoremap c "*y
vnoremap <Leader>c "*y
nnoremap <Leader>c "*y

" pasting just in case 
vnoremap <Leader>v "*p
nnoremap <Leader>v "*p

" cutting
vnoremap <Leader>x "*d
nnoremap <Leader>x "*d

" saving file
nnoremap <Leader>w :write<CR>

" closing
nnoremap <Leader>C :close<CR>
nnoremap <Leader>q :wq<CR>
nnoremap <Leader>QQ :q!<CR>

" copilot
let g:copilot_filetypes = {
      \ '*': v:true,
      \ }

" tabs and buffers
" tab switching using ctrl + tab
nnoremap <Leader>k :tabprevious<CR>
nnoremap <Leader>j :tabnext<CR>
nnoremap <Leader>, :tabprevious<CR>
nnoremap <Leader>. :tabnext<CR>

" rebind :bprev and :bnext
nnoremap <Leader>J :bprev<CR>
nnoremap <Leader>K :bnext<CR>
 
" copilot remap autocomplete to ctrl + l
imap <silent><script><expr> <C-l> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

" Telescope searching
" map <Leader>F to search for the current word under the cursor
nnoremap <Leader>F viw"0y<space>:Telescope grep_string<CR><Esc>
nnoremap <Leader>f :Telescope live_grep<CR>
nnoremap <Leader>p :Telescope find_files<CR>

" reload configuration
nnoremap <Leader>R :source ~/.config/nvim/init.lua<CR>

" remap ctrl + d
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

map <leader>G :LazyGit<CR>

" buffer switching like Vimium
nnoremap <Leader>b :Telescope buffers<CR><Esc>
nnoremap T :Telescope buffers<CR>
nnoremap <Leader>t :Telescope buffers<CR>

set ignorecase
set smartcase
" set incsearch, this should remain off
set noincsearch

tnoremap <Esc> <C-\><C-n>

nnoremap <Leader>m :Glow<CR>

" On pressing tab, insert 2 spaces
set expandtab
" show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2


" expirimental tmux navigator
let g:tmux_navigator_no_mappings = 1
" let  g:tmux_navigator_no_wrap = 1

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
noremap <silent> <C-h> :<C-U>TmuxNavigateLeft<cr>
noremap <silent> <C-j> :<C-U>TmuxNavigateDown<cr>
noremap <silent> <C-k> :<C-U>TmuxNavigateUp<cr>
noremap <silent> <C-l> :<C-U>TmuxNavigateRight<cr>
noremap <silent> <C-/> :<C-U>TmuxNavigatePrevious<cr>
"
"
" mapping with meta 
nnoremap <M-Left> <C-w>h
nnoremap <M-Down> <C-w>j
nnoremap <M-Up> <C-w>k
nnoremap <M-Right> <C-w>l
noremap <silent> <M-Left>  :<C-U>TmuxNavigateLeft<cr>
noremap <silent> <M-Down>  :<C-U>TmuxNavigateDown<cr>
noremap <silent> <M-Up>    :<C-U>TmuxNavigateUp<cr>
noremap <silent> <M-Right> :<C-U>TmuxNavigateRight<cr>


" bind ctrl + shift + d to insert (date +'%y%m%d - %H:%M %p') 
" nnoremap <C-D> i<C-R>=strftime("%y%m%d")<CR>
" do the same but from insert mode
inoremap <C-D> <C-R>=strftime("%y%m%d")<CR>

